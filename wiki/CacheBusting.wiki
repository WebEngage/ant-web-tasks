#summary Attributes and samples on how to use the <cacheBuster> inside PowerWAR
#labels Featured

== Introduction ==
 # [#What_is_cache_busting? What is cache busting?]
 # [#CacheBusting_Attributes Cache Busting Attributes]
 # [#CacheBusting_Nested_Elements Cache Busting Nested Elements]
 # [#Cache_Busting_Samples Cache Busting Samples]

== What is cache busting? ==
By cache, here I always mean HTTP Cache. HTTP Cache comes as a huge boon for performance. Clients (Browsers) typically store a copy of the HTTP Response and serve it from their caches unless instructed otherwise. In typical scenarios, this works very well. However, you run into a problem when you want to invalidate this cache. There are very few ways to achieve this. Cache Busting is one of the solutions to this problem in which a random string is appended to the HTTP Request URL, thereby "faking" an altogether new URL. The browser is forced to make a request as the URL itself has changed.

The PowerWAR task of this Ant contribution lets you achieve this from the comfort of your build.xml file. Underneath is a simple example -
{{{
<taskdef name="powerWar" classname="com.avlesh.antwebtasks.war.PowerWAR" classpath="/path/to/ant-web-tasks.jar"/>
<target name="my-war-target">
  <powerWar destfile="distribution/myapp.war" webxml="web/WEB-INF/web.xml" compress="true">

    <cacheBuster verbose="on" versionFile="version.txt">
      <fileset dir="web"/>
      <rule from="/mysite/css/(.*).css" 
              to="/mysite/css/(.*).css?random=%{version-file-txt}"/>
    </cacheBuster>
    
    ...
  </powerWar>
</target>
}}}

=== Cache Busting Attributes ===
<table cellspacing="0" cellpadding="10" border="1" width="800">
 <tr>
  <td width="100" valign="top" align="left"><b>Attribute</b></td>
  <td width="500" valign="top" align="left"><b>Description</b></td>
  <td width="200" valign="top" align="left"><b>Remarks</b></td>
 </tr>
 <tr>
  <td width="100" valign="top" align="left">{{{fileset}}}</td>
  <td width="500" valign="top" align="left">{{{<fileset>}}} is a nested inner element for {{{inject}}} inside the {{{powerWar}}} task. Using this, you can specify group of files to which injection should be applied. {{{<fileset>}}} is a core Ant data-type. Find more details on using fileset here - http://ant.apache.org/manual/CoreTypes/fileset.html
<br/><br/>Here's an example of applying injection to all ".xml" and ".properties" file inside the "web" directory minus the "web.xml" file.
{{{
<inject verbose="on">
  <fileset dir="web">
    <include name="**/*.xml"/>
    <include name="**/*.properties"/>
    <exclude name="**/web.xml" />
  </fileset>
</inject>
}}}
 </td>
  <td valign="top" align="left">Default: {{{none}}}, applies the inject directive to all the files in project's base directory to be added to the war archive.<br/><br/>Note: You can specify multiple {{{<fileset>}}} based selectors for a single {{{inject}}} element.
  </td>
 </tr>
</table>