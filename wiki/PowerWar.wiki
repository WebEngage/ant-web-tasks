#summary All in one, a powerful extension of the Ant WAR task.
#labels Featured
PowerWAR, as the name says :), is a powerful extension of Ant's [http://ant.apache.org/manual/CoreTasks/war.html WAR task]. Apart from everything that the original WAR task lets you do, PowerWAR adds capability to perform property-injection and cache-busting. 
<br/><br/>
To begin with, first download the latest binary, and change your WAR task's usage as below
{{{
<taskdef name="powerWar" classname="com.avlesh.antwebtasks.war.PowerWAR" classpath="/path/to/ant-web-tasks.jar"/>
<target name="my-war-target">
  <powerWar destfile="distribution/myapp.war" webxml="web/WEB-INF/web.xml" compress="true">
    <classes dir="${build.dir}/classes"/>
    <lib dir="${lib.dir}">
      <include name="*.jar" />
    </lib>
    <fileset dir="web">
      <exclude name="**/web.xml" />
    </fileset>
  </powerWar>
</target>
}}}
As you might have noticed, other than the task name nothing has really changed. Hmmm ... we are yet to discover the functionlities that {{{<powerWar>}}} has to offer in the subsequent sections. Lets move on.

== What is property injection? ==
Simply put, an attempt to resolve ANT build time properties names in specified files and replace these with their corresponding values.
<br/>
For an example, lets say you have a file 
WEB-INF/some-application-property.xml which has this content -
{{{
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
  <property name="driverClassName">
    <value>com.mysql.jdbc.Driver</value>
  </property>
  <property name="url">
    <value>jdbc:mysql://${MYSQL.HOST}:${MYSQL.PORT}/${MYSQL.SCHEMA}</value>
  </property>
  <property name="username">
    <value>${MYSQL.USER}</value>
  </property>
  <property name="password">
    <value>${MYSQL.PASSWORD}</value>
  </property>
</bean>
}}}
${MYSQL.USER} and the likes are nothing but fancy placeholders. If there is a build property called "MYSQL.USER" defined in Ant, then this token will get replaced with the corresponding value.
<br/>
While performing your WAR operation, you can instruct {{{<powerWar>}}} to {{{inject}}} the real values in this file as underneath
{{{
<taskdef name="powerWar" classname="com.avlesh.antwebtasks.war.PowerWAR" classpath="/path/to/ant-web-tasks.jar"/>
<target name="my-war-target">
  <powerWar destfile="distribution/myapp.war" webxml="web/WEB-INF/web.xml" compress="true">
    <!-- 
     Bare minimum usage of the injector. You can customize the behavior
     for more advanced pattern matching.
     For more, look here
    -->
    <inject verbose="on">
      <path>
       <fileset dir="web>
         <include name="WEB-INF/some-application-property.xml"/>
       </fileset>
      </path>
    </inject>

    <classes dir="${build.dir}/classes"/>
    <lib dir="${lib.dir}">
      <include name="*.jar" />
    </lib>
    <fileset dir="web">
      <exclude name="**/web.xml" />
    </fileset>
  </powerWar>
</target>
}}}